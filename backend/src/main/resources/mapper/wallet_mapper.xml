<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="walletRepository">

    <!-- 결과 타입 정의 -->
    <resultMap id="walletResultMap" type="com.spring.project.dto.WalletDTO">
        <result property="userId" column="userId"/>
        <result property="balance" column="balance"/>
        <result property="locked" column="locked"/>
        <result property="updatedAt" column="updatedAt"/>
    </resultMap>

    <!-- 사용자 지갑 정보 조회 -->
    <select id="getWalletByUserId" parameterType="int" resultMap="walletResultMap">
        SELECT userId, balance, locked, updatedAt
        FROM Wallets
        WHERE userId = #{userId}
    </select>

    <!-- 지갑 생성 (신규 사용자용) -->
    <insert id="createWallet" parameterType="com.spring.project.dto.WalletDTO">
        INSERT INTO Wallets (userId)
        VALUE (#{userId})
    </insert>

    <!-- 포인트 잠금 (입찰 시: balance → locked 이동) -->
    <update id="lockPoints" parameterType="map">
        UPDATE Wallets 
        SET balance = balance - #{amount},
            locked = locked + #{amount},
            updatedAt = CURRENT_TIMESTAMP
        WHERE userId = #{userId}
          AND balance >= #{amount}  -- 잔액 부족 시 업데이트되지 않음
    </update>

    <!-- 포인트 잠금 해제 (입찰 실패 시: locked → balance 이동) -->
    <update id="unlockPoints" parameterType="map">
        UPDATE Wallets 
        SET locked = locked - #{amount},
            balance = balance + #{amount},
            updatedAt = CURRENT_TIMESTAMP
        WHERE userId = #{userId}
          AND locked >= #{amount}  -- 잠긴 포인트 부족 시 업데이트되지 않음
    </update>

    <!-- 포인트 차감 (낙찰 시: locked 포인트 차감) -->
    <update id="deductLockedPoints" parameterType="map">
        UPDATE Wallets 
        SET locked = locked - #{amount},
            updatedAt = CURRENT_TIMESTAMP
        WHERE userId = #{userId}
          AND locked >= #{amount}  -- 잠긴 포인트 부족 시 업데이트되지 않음
    </update>

    <!-- 보유 포인트에서 직접 차감 (일반 결제용: balance 포인트 차감) -->
    <update id="deductBalance" parameterType="map">
        UPDATE Wallets 
        SET balance = balance - #{amount},
            updatedAt = CURRENT_TIMESTAMP
        WHERE userId = #{userId}
          AND balance >= #{amount}  -- 보유 포인트 부족 시 업데이트되지 않음
    </update>

    <!-- 포인트 충전 (balance 증가) -->
    <update id="addBalance" parameterType="map">
        UPDATE Wallets 
        SET balance = balance + #{amount},
            updatedAt = CURRENT_TIMESTAMP
        WHERE userId = #{userId}
    </update>

    <!-- 지갑 전체 정보 업데이트 -->
    <update id="updateWallet" parameterType="com.spring.project.dto.WalletDTO">
        UPDATE Wallets 
        SET balance = #{balance},
            locked = #{locked},
            updatedAt = CURRENT_TIMESTAMP
        WHERE userId = #{userId}
    </update>

    <!-- 지갑 존재 여부 확인 -->
    <select id="existsWallet" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM Wallets
        WHERE userId = #{userId}
    </select>

    <!-- 사용 가능한 포인트 조회 (balance - locked) -->
    <select id="getAvailableBalance" parameterType="int" resultType="int">
        SELECT COALESCE(balance - locked, 0) AS availableBalance
        FROM Wallets
        WHERE userId = #{userId}
    </select>

    <!-- 전체 포인트 조회 (balance + locked) -->
    <select id="getTotalBalance" parameterType="int" resultType="int">
        SELECT COALESCE(balance + locked, 0) AS totalBalance
        FROM Wallets
        WHERE userId = #{userId}
    </select>

    <!-- 사용자별 포인트 통계 (관리자용) -->
    <select id="getPointsStatsByUserId" parameterType="int" resultType="map">
        SELECT 
            userId,
            balance,
            locked,
            (balance + locked) AS totalBalance,
            (balance - locked) AS availableBalance,
            updatedAt
        FROM Wallets
        WHERE userId = #{userId}
    </select>

    <!-- 전체 사용자 포인트 통계 (관리자 대시보드용) -->
    <select id="getAllPointsStats" resultType="map">
        SELECT 
            COUNT(*) AS totalWallets,
            SUM(balance) AS totalBalance,
            SUM(locked) AS totalLocked,
            SUM(balance + locked) AS grandTotal,
            AVG(balance) AS avgBalance
        FROM Wallets
    </select>

</mapper>
